---
openapi: 3.0.3
info:
  title: Order service API
  version: 1.0.0
  description: |
    The **Order Service API** allows clients or
    other services to manage orders in the system.
    Functionality includes creating new orders,
    retrieving an order by ID, retrieving all orders,
    and updating existing orders.
    Each order contains multiple `OrderItem`.

tags:
  - name: Order
    description: Endpoints for managing orders

servers:
  - url: http://localhost:8081/api
    description: Local development server (for testing purposes)

paths:
  /order:
    post:
      operationId: createOrder
      tags:
        - Order
      summary: Save a new order
      description: |
        Creates a new order in the system using `OrderDto`.
        The order will contain a list of items and customer contact details.
        The item count must be greater than 0.
        Returns the newly created order with a generated `Id`.
      requestBody:
        required: true
        description: Data required to create a new order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDto'
      responses:
        '201':
          description: Order successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orders'
        '400':
          description: Missing or invalid parameter in the request body
        '500':
          description: Internal server error
    get:
      operationId: getAllOrders
      tags:
        - Order
      summary: Get all orders
      description: |
        Retrieves all orders currently stored in the system.
        Each order includes details about items and customer
        contact information.
      responses:
        '200':
          description: Successfully returned all orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Orders'
        '500':
          description: Internal server error

  /order/{id}:
    get:
      operationId: getOrderById
      tags:
        - Order
      summary: Get an order by ID
      description: |
        Retrieves a single order by its unique identifier (`id`).
        Returns the complete order details including
        items and customer information.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the order
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: Order found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orders'
        '400':
          description: Missing or invalid `id` parameter
        '404':
          description: Order with the given ID was not found
        '500':
          description: Internal server error
    put:
      operationId: updateOrderById
      tags:
        - Order
      summary: Update an existing order
      description: |
        Updates an existing order identified by `id` using `OrderDto`.
        The full updated order details will be returned.
        Only valid order IDs can be updated.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the order to update
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        description: Updated order details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDto'
      responses:
        '200':
          description: Order successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orders'
        '400':
          description: |
            Missing or invalid `id` parameter,or invalid request body
        '404':
          description: Order not found
        '500':
          description: Internal server error

components:
  schemas:
    Orders:
      type: object
      description: Represents an order stored in the system.
      required:
        - id
        - totalPrice
        - status
        - items
      properties:
        id:
          type: integer
          description: Unique identifier of the order
          example: 1
        totalPrice:
          type: number
          format: double
          description: Total price of the order
          example: 99.98
        status:
          type: string
          enum: [CONFIRMED, SHIPPED, CANCELLED]
          description: the order status (CONFIRMED, SHIPPED, CANCELLED)
          example: "CONFIRMED"
        items:
          type: array
          description: List of items included in the order
          items:
            $ref: '#/components/schemas/OrderItem'

    OrderItem:
      type: object
      description: Represents a single item included in an order.
      required:
        - id
        - itemId
        - quantity
        - price
      properties:
        id:
          type: integer
          description: Unique identifier of the order item
          example: 2
        itemId:
          type: integer
          description: Unique identifier of the item
          example: 1
        quantity:
          type: integer
          description: |
            Quantity of the item in the order,
            it must be greater than 0,
            and the requested quantity must NOT exceed the available stock.
          example: 2
        price:
          type: number
          format: double
          description: Price per unit of the item
          example: 49.99

    OrderDto:
      type: object
      description: Data transfer object used to create or update an order.
      required:
        - totalPrice
        - status
        - items
      properties:
        totalPrice:
          type: number
          format: double
          description: Total price of the order
          example: 99.98
        status:
          type: string
          enum: [CONFIRMED, SHIPPED, CANCELLED]
          description: the order status (CONFIRMED, SHIPPED, CANCELLED)
          example: CONFIRMED
        items:
          type: array
          description: List of items included in the order
          items:
            $ref: '#/components/schemas/OrderItemDto'
    OrderItemDto:
      type: object
      description: Represents a single item included in an order.
      required:
        - itemId
        - quantity
        - price
      properties:
        itemId:
          type: integer
          description: Unique identifier of the item
          example: 1
        quantity:
          type: integer
          description: |
            Quantity of the item in the order,
            it must be greater than 0,
            and the requested quantity must NOT exceed the available stock.
          example: 2
        price:
          type: number
          format: double
          description: Price per unit of the item
          example: 49.99
